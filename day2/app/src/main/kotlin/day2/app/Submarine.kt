/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package day2.app

class Submarine {
    fun pilot(commands: String): Int {
        val commandList = commands.split('\n').dropLast(1)
        val horizontalPosition = commandList.filter { it.contains("forward") }.sumOf { parseCommand(it) }
        val depth = commandList.filter {!it.contains("forward")}.sumOf {parseCommand(it)}
        return horizontalPosition * depth
    }

    data class Position(var horizontal: Int, var aim: Int, var depth: Int)
    fun pilot2(commands: String): Int {
        val commandList = commands.split('\n').dropLast(1)
        var result = commandList.fold(Position(0, 0, 0)) { position, command ->
            var (direction, value) = command.split(" ")

            when (direction) {
                "forward" -> {
                    position.horizontal += value.toInt()
                    position.depth += position.aim * value.toInt()
                }
                "down" -> position.aim += value.toInt()
                "up" -> position.aim -= value.toInt()
            }

            position
        }
        result.depth *= result.horizontal
        return result.depth
    }

    private fun parseCommand(command: String): Int {
        val (direction, distance) = command.split(" ")
        return if (direction == "up") -distance.toInt() else distance.toInt()
    }
}
