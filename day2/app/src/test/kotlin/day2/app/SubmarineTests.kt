/*
 * This Kotlin source file was generated by the Gradle "init" task.
 */
package day2.app

import org.junit.jupiter.api.Test

import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Disabled

class SubmarineTests {
    private val sub = Submarine()

    @Test fun pilotReturns1() {
        var input = """forward 1
down 1
"""
        var expected = 1
        var actual = sub.pilot(input)
        assertEquals(expected, actual)
    }

    @Test fun pilotForward2Returns2() {
        var input = """forward 2
down 1
"""
        var expected = 2
        var actual = sub.pilot(input)
        assertEquals(expected, actual)
    }

    @Test fun pilotDown2Returns2() {
        var input = """forward 1
down 2
"""
        var expected = 2
        var actual = sub.pilot(input)
        assertEquals(expected, actual)
    }

    @Test fun pilotUp2ReturnsNeg2() {
        var input = """forward 1
up 2
"""
        var expected = -2
        var actual = sub.pilot(input)
        assertEquals(expected, actual)
    }

    @Test fun pilotExampleReturns150() {
        var input = """forward 5
down 5
forward 8
up 3
down 8
forward 2
"""
        var expected = 150
        var actual = sub.pilot(input)
        assertEquals(expected, actual)
    }

    @Test fun parseCommandForward1Returns1() {
        val command = "forward 1"
        val expected = sub.parseCommand(command)
        val actual = 1
        assertEquals(expected, actual)
    }
    @Test fun parseCommandForward3Returns3() {
        val command = "forward 3"
        val expected = sub.parseCommand(command)
        val actual = 3
        assertEquals(expected, actual)
    }
    @Test fun parseCommandUp3ReturnsNeg3() {
        val command = "up 3"
        val expected = sub.parseCommand(command)
        val actual = -3
        assertEquals(expected, actual)
    }
    @Test fun parseCommandDown3Returns3() {
        val sub = Submarine()
        val command = "down 3"
        val expected = sub.parseCommand(command)
        val actual = 3
        assertEquals(expected, actual)
    }
}
